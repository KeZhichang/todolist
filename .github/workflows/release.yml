name: Build and Release

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.tauri-version.outputs.version }}
      version_number: ${{ steps.tauri-version.outputs.version_number }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version from tauri.conf.json
        id: tauri-version
        run: |
          VERSION=$(node -p "require('./src-tauri/tauri.conf.json').version")
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "version_number=$VERSION" >> $GITHUB_OUTPUT
          echo "Tauri version: v$VERSION"

  build:
    needs: get-version
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
            name: 'macOS'
            rust-target: 'universal-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
            name: 'Linux'
            rust-target: 'x86_64-unknown-linux-gnu'
          - platform: 'windows-latest'
            args: ''
            name: 'Windows'
            rust-target: 'x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || matrix.rust-target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Remove package-lock.json and package.json (as requested)
        run: |
          if [ -f package-lock.json ]; then rm package-lock.json; fi
          rm package.json
        shell: bash

      - name: Restore package.json
        run: git checkout HEAD -- package.json
        shell: bash

      - name: Install frontend dependencies
        run: npm install

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ matrix.args }}

      - name: Collect build artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          mkdir -p ./release-artifacts
          echo "Searching for Windows build artifacts..."
          find src-tauri/target/release/bundle -type f \( -name "*.msi" -o -name "*setup.exe" -o -name "*installer.exe" \) -exec cp {} ./release-artifacts/ \;
          echo "Windows artifacts collected:"
          ls -la ./release-artifacts/
        shell: bash

      - name: Collect build artifacts (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          mkdir -p ./release-artifacts
          echo "Searching for macOS build artifacts..."
          find src-tauri/target/universal-apple-darwin/release/bundle -name "*.dmg" -exec cp {} ./release-artifacts/ \;
          echo "macOS artifacts collected:"
          ls -la ./release-artifacts/

      - name: Collect build artifacts (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          mkdir -p ./release-artifacts
          echo "Searching for Linux build artifacts..."
          find src-tauri/target/release/bundle -type f \( -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" \) -exec cp {} ./release-artifacts/ \;
          echo "Linux artifacts collected:"
          ls -la ./release-artifacts/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-artifacts
          path: ./release-artifacts/*
          retention-days: 1

  create-release:
    needs: [get-version, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts/

      - name: List all artifacts
        run: |
          echo "All collected artifacts:"
          find ./artifacts -type f | sort

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.get-version.outputs.version }}
          name: PrioSpace ${{ needs.get-version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: ./artifacts/**/*
          body: |
            ## PrioSpace ${{ needs.get-version.outputs.version }}
            
            A cross-platform productivity application built with Tauri and Next.js.
            
            ### Downloads
            
            Choose the appropriate installer for your operating system:
            
            **Windows:**
            - üì¶ MSI Installer (recommended for most users)
            - üîß Setup Executable (alternative installer)
            
            **macOS:**
            - üçé Universal DMG (supports both Intel and Apple Silicon Macs)
            
            **Linux:**
            - üì± AppImage (portable, runs on most distributions)
            - üì¶ DEB Package (for Debian/Ubuntu-based systems)
            
            ### Installation Instructions
            
            **Windows:** Download and run either the .msi or .exe installer
            **macOS:** Download the .dmg file, open it, and drag PrioSpace to Applications
            **Linux:** Download the .AppImage and make it executable, or install the .deb package
            
            ### System Requirements
            
            - **Windows:** Windows 10 or later
            - **macOS:** macOS 10.15 or later
            - **Linux:** Modern distribution with WebKit2GTK support

  cleanup:
    needs: [create-release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            Windows-artifacts
            macOS-artifacts
            Linux-artifacts
          failOnError: false
